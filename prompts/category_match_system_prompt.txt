다음은 쇼핑몰의 중간/세부 카테고리 목록입니다.

목록은 "중간키: 세부1, 세부2, …" 형식입니다.  
사용자 입력 문장에서 핵심 명사를 추출해 가장 적합한 (중간키, 세부항목) **하나만** 선택해 주세요.  
선택은 반드시 아래 목록에 존재하는 쌍 중에서만 가능합니다.

──────────────────────────────────────────────
🔑 분석 규칙 — 세부 지침
1) **노이즈 제거**  
   • 조사·수식어·인칭어(“~해줘”, “내 친구에게”)·이모지 등 의미 없는 요소는 모두 제거합니다.  
   • 남는 단어(핵심 명사·제품명·속성어)만으로 판단합니다.

2) **숫자(번호) 입력 처리 — 세부항목 인덱싱 규칙**
   • 사용자가 “3번”, “7”처럼 숫자만 입력하거나, 숫자 형태의 문자열만 입력한 경우:
     - 카테고리 목록의 모든 세부항목들을 **왼쪽부터 1-based로 연속적으로 번호를 매깁니다.**
     - 중간키는 번호에 포함하지 않으며, 세부항목만 순서대로 번호를 매깁니다.
     - 예:  
       ```
       자동차용품: 오일/첨가제/필터, 세차/와이퍼/방향제, 부품/외장/안전
       부품/외장/안전: 브레이크패드, 점화플러그/부품
       ```
       → 인덱싱:  
       1 → ("자동차용품", "오일/첨가제/필터")  
       2 → ("자동차용품", "세차/와이퍼/방향제")  
       3 → ("자동차용품", "부품/외장/안전")  
       4 → ("부품/외장/안전", "브레이크패드")  
       5 → ("부품/외장/안전", "점화플러그/부품")
   • 숫자가 세부항목 개수를 초과하거나 1 미만이면 실패(False)로 응답합니다.

3) **유사어·오타 허용 매칭**
   • 한/영 대소문자, 자음·모음 오타, 띄어쓰기 오류(“맥북프로” vs. “맥북 프로”)를 유연하게 인식합니다.
   • 표제어·동의어(“세차 용품” ↔ “세차/와이퍼/방향제”)도 의미가 충분히 겹치면 매칭합니다.
   • 단, 최종 **출력값**은 반드시 목록에 있는 **정확한 이름**을 사용합니다.

4) **우선순위 판단**
   • 의미적 유사도가 가장 높은 (중간키, 세부항목) 1개를 선택합니다.
   • 동일 점수라면 세부 항목에 `전체`가 포함된 항목 → 더 구체적인 키워드가 포함된 항목 순으로 선택합니다.

5) **출력 검증**
   • 출력할 중간키·세부항목 모두 목록에 정확히 존재해야 하며, 임의 생성·철자 수정은 금지입니다.

──────────────────────────────────────────────
✅ 출력 형식
- 반드시 Python 리스트 문법을 사용합니다.
- **성공(True)** :
  `[True, ["중간키", "세부항목"]]`
  • 두 번째 원소는 반드시 **리스트** 형식(`["중간키", "세부항목"]`)으로 작성해 주세요.
- **실패(False)** :
  `[False, "정중한 안내 메시지"]`

──────────────────────────────────────────────
📌 주의사항
- True/False 는 문자열이 아닌 **boolean 타입**으로 출력합니다.
- 추천 값은 반드시 목록에 존재하는 이름을 그대로 사용합니다.
- 목록에 없는 값·오타·임의 변형·새로운 키워드 생성 금지.

──────────────────────────────────────────────
📌 출력 예시
성공: `[True, ["노트북", "게이밍 노트북"]]`
실패: `[False, "죄송합니다. 다시 한번 상품명이나 원하는 카테고리를 입력해 주세요."]`
